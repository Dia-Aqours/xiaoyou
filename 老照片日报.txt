9.25 
    做主页 设置页面 探究安卓的布局的问题
    简单了解安卓

9.26 
    做主页到设置页面的跳转 探究单击事件的使用方法 大致有三种
            //view层的控件和业务层的控件，靠id关联和映射  给ib1赋值，即设置布局文件中的Button按钮Iimageid进行关联
            ib1 = (ImageButton)findViewById(R.id.iB1); 
            ib1.setOnClickListener(new OnClickListener(){ //给ib1绑定监听事件
            @Override
            public void onClick(View v1){
                Intent intent1 = new Intent(MainActivity.this,setting.class) ; //给ib1添加响应事件
                startActivity(intent1); //启动
            }
            
            这种是一开始就接触到的 简单看一下也能大致理解

            ImageButton btnTakePhoto = (ImageButton) findViewById(R.id.iB5);
            btnTakePhoto.setOnClickListener(this);

            然后就是这种 
            第三种是直接在xml写android:onClick="login"
            然后再写login方法
            public void login (view v){
                Toast.makeText(MainActivity.this,"第三种方法",Toast.LENGTH_SHORT).show();
            }

            单击事件弄好 跳转也就很轻松了 

9.27
    把相册页面做好，但是远远没这么简单。
    我思考的是 这个页面能获取一个特定文件夹的信息，然后把照片一一读取出来
    然后没有照片的时候 就放那个空的图界面
    这个放后面来
    先开始弄相机 一开始像单击事件一样 调用相机 但是发现存储编辑什么的都做不到
    之后用一个可以存储的 但是在权限上弄了好久
    但是这个相机因为用了外面的工具类 所以完全没能自定义
    且存储方式也是问题 所以要研究好这个类

9.28
    研究如何存储到相册页面然后提取出来
    网上看到了许多方法 但是无法弄懂一些语句的含义
    现在只能把相册的一张图片手动放置到相册界面 
    所以我决定还是先继续看教程 
    一个数据传递的练习 主要是通过页面1的按钮让页面2的textview收到数据
            intent.putExtra("001","数据页面一");
            这个语句把 数据页面一 这个字符串保存在 id为 001 中 
            startActivityForResult(intent,0x01);
            然后返回一个结果 数据为0x01
            String data = intent.getStringExtra("001");
            页面2接收则用 getStringExtra后面写上之前保存过的ID来获取
            textView2.setText(data);
            然后通过setText来修改 修改的内容则是上面的data 
            同时页面2也返回一组数据
            intent.putExtra("002",1234);
            同样也要返回一个结果
            setResult(0x02,intent);
            页面1接收的时候 
            protected void onActivityResult(int requestCode, int resultCode, @Nullable Intent data)
            主要是用这个 onActivityResult 来实现
            判断一下 请求码和结果码
            if (requestCode == 0x01 && resultCode == 0x02 )
            0x01是页面1传送数据发出的一个码，0x02是页面2返回数据的时候的一个码
            int i = data.getIntExtra("002",0);
            然后 把数据 用getIntExtra来获取 
            textView.setText(i+"");
            用这个来修改 然后还有就是上面用到的xml控件统统都要获取ID
            textView=findViewById(R.id.textView);
            button = findViewById(R.id.button);
            例如这些 都不能少 测试的时候就因为页面1的textView没有获取ID导致返回的时候闪退
    
    然后这次我回过头来看相机 这无论是页面1还是页面2 他切换页面 回去之后数据都销毁了 
    怎么才能让页面1的url被页面2拿到呢
    这个首先还是要解决存储问题
    
9.29
    今天仔细看了下这个存储的问题
    找到了这个存储点 新建了文件夹来存放
    当然显示图片也可以解决了
    但是一张能存 多张的话 我目前思考是写个循环 但是不知道在哪里写
    感觉应该是这样做的 循环存储命名+1 然后读取命名+1
           photo2 = (ImageView) findViewById(R.id.photo2);

           Bitmap bitmap = BitmapFactory.decodeFile(s);
                photo2.setImageBitmap(bitmap);
                Uri uri = Uri.fromFile(new File(s));
                photo2.setImageURI(uri);
        用这个方式 可以将图片在这个photo2上显示 
    然后接下来有几个方向
    可以先把设置页面的几个跳转做了 如果命名这里没什么头绪就先弄跳转那里 
    先弄一个启动页面 想法是启动入口改到欢迎页面然后一段时间后跳转到main页面
            <intent-filter>
                <action android:name="android.intent.action.MAIN" />
                <category android:name="android.intent.category.LAUNCHER" />
            </intent-filter>

            这个在mainifest就是入口 把这个放进去就是入口
    
    然后跳转QQ聊天界面
                String url="mqqwpa://im/chat?chat_type=wpa&uin=7403754";
                startActivity(new Intent(Intent.ACTION_VIEW, Uri.parse(url)));
            uin后面的就是聊天的对象

    跳转问卷要跳转网页 这样子就要用到webview 有点复杂 要看一下
    看回相册部分 主要是看到了动态添加这个东西 就想到相册那边是不是也能这么做
    
9.30
    今天方向有几个 弄存储的循环和相册的动态添加或者webview
    存储的循环有头绪但是方法毫无头绪 可能需要重新认知一下存储和调用
    动态添加看到很多方法 但是这个和存储那边关系很密切 最好能先弄存储再弄这个
    所以先弄webview的好了
    先把 头像和APP名字弄好 
                <string name="app_name">老照片三人组</string>
                string文件下的这句话就是改名字的
            然后在android:icon="@mipmap/icon_square"
            这个地方改头像 在mainifest里面 
    想办法把单张点击弄了
    想法是点击后启动裁剪

10.8
    回忆了一波之前的，决定还是先弄存储问题
    可能这个定点获取文件名 不太适合 但是不知道修改方法
    这边是获取文件的uri 后面的路径感觉可以做文章
    RelativeLayout这个东西叫相对布局
    可以利用来布局
    中间的空白显示的图片 用getVisibility和setVisibility解决了
    经过大哥指导 发现有瀑布流这个东西可以用 还有命名可以用时间来解决

10.9
    先开始弄时间存文件
    用文件流的方式来弄
    经历了诸多困难 flush();一直提示我为空 很疑惑
    注释掉就可以正常使用 不知道文件流不close会怎么样
    不管了
    先弄瀑布流 有点复杂
    但是好像和之前说的listview 碎片化有点像
    并不用来从网上获取图片 所以不用那么麻烦
    只是基础的展示图片就行了
    所以要弄得就是 怎样用这个RecyclerView在指定位置展示图片
    然后这个问题会带来的衍生问题就是 怎样获取全部图片的路径并依次展示
    所以最后还是选择 普通方式。。
    
10.10
    今天上午大扫除后，开始准备做 照片展示的问题  
    继续昨天的一个 在LinearLayout里面动态添加ImageView
    之前根据其他的工程 照片可以获取全部.jpg然后放到一个数组里面
    然后动态添加 但是现在看到的动态添加都是手动的
    如何自动也是个问题
    最后还是得用瀑布流
    用了自定义ScrollView来实现
    还挺顺利 后面就是怎么改uri的问题

10.11
    今天研究怎么弄那个uri的问题
    在loadMoreImages截到了文件数量的接口
    在doInBackground截到了文件入口
    但是这个文件入口 怎么写个轮换循环是个问题
    在doInBackground写了个循环，的确也能显示每一张了 但是
    打开的一瞬间显示的都是最后一张
    滑动一下就会好 这个我猜测是读取图片那个LruCache算法的问题
    接下来可能要去弄 点击事件 好像有点麻烦 如果要加新的框架怕又有新bug
    下午可能研究下这个显示问题
    把图片目录大量复制了一下 变得很卡
    很疑惑 之前下载的也是200张完全没问题
    看来还是要用他的方法 还是从uri那里做吧
    在uri传递下来的时候截 果然 效果拔群
    之前的显示最后一张的问题也解决了


10.12 
      崩了电脑，大体上是修复滚屏加载问题 
      然后决定使用新瀑布流


10.13 
      重装系统
      人脸识别项目 感觉还是嗯可以做的
      
10.15 
      重写了一些按钮 规范化
    看了一下对于Fragment的一些理解

    Fragment为何要用：
    代码复用。特别适用于模块化的开发，因为一个Fragment可以被多个Activity嵌套，有个共同的业务模块就可以复用了，是模块化UI的良好组件。
    Activity用来管理Fragment。Fragment的生命周期是寄托到Activity中，Fragment可以被Attach添加和Detach释放。
    可控性。Fragment可以像普通对象那样自由的创建和控制，传递参数更加容易和方便，也不用处理系统相关的事情，显示方式、替换、不管是整体还是部分，都可以做到相应的更改。
    Fragments是view controllers，它们包含可测试的，解耦的业务逻辑块，由于Fragments是构建在views之上的，而views很容易实现动画效果，因此Fragments在屏幕切换时具有更好的控制。

    什么是Fragment
    它可以表示Activity中的行为或用户界面部分。我们可以在一个Activity中用多个Fragment组合来构建多窗格的UI，以及在多个Activity中重复使用某个Fragment。
    它有自己的生命周期，能接受自己的输入，并且可以在 Activity 运行时添加或删除Fragment。
    简单来说，Fragment其实可以理解为一个具有自己生命周期的控件，只不过这个控件又有点特殊，它有自己的处理输入事件的能力，有自己的生命周期，又必须依赖于Activity，能互相通信和托管。

然后看到fragment的用法也主要是两种 动态和静态
静态主要是：
1、继承Fragment，重写onCreateView决定Fragemnt的布局
2、在Activity中声明此Fragment，就当和普通的View一样

先写两个fragment的xml界面 然后在fragment类中onCreateView()声明return inflater.inflate(R.layout.fragment1, container, false)
然后在main布局中写一个fragment的一个包围 加上android:name="com.example.fragmentdemo.Fragment1"  的引用
基本可以了

动态的就不直接在xml引用
        Display display = getWindowManager().getDefaultDisplay();  
        if (display.getWidth() > display.getHeight()) {  
            Fragment1 fragment1 = new Fragment1();  
            getFragmentManager().beginTransaction().replace(R.id.main_layout, fragment1).commit();  
        } else {  
            Fragment2 fragment2 = new Fragment2();  
            getFragmentManager().beginTransaction().replace(R.id.main_layout, fragment2).commit();  
        } 
        在mian xml引入这样的
1.获取到FragmentManager，在Activity中可以直接通过getFragmentManager得到。

2.开启一个事务，通过调用beginTransaction方法开启。

3.向容器内加入Fragment，一般使用replace方法实现，需要传入容器的id和Fragment的实例。

4.提交事务，调用commit方法提交。




